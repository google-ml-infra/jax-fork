name: Build JAX Artifacts (matrix debug)

on:
  # pull_request:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: choice
        required: true
        default: 'no'
        options:
        - 'yes'
        - 'no'
  workflow_call:
    inputs:
      clone_main_xla:
        description: "Should latest XLA be used? (1 to enable, 0 to disable)"
        type: string
        required: false
        default: "0"
      upload_artifacts:
        description: "Should the artifacts be uploaded to a GCS bucket?"
        required: false
        default: false
        type: boolean
      upload_destination_prefix:
        description: "GCS location prefix to where the artifacts should be uploaded"
        required: false
        default: '${{ github.workflow }}/${{ github.run_number }}/${{ github.run_attempt }}'
        type: string

jobs:
  determine_matrix:
    runs-on: "linux-x86-n2-16"
    container: "us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build:latest"
    outputs:
      artifact_matrix: ${{ steps.set-matrix.outputs.artifact_matrix }}
      python_matrix: ${{ steps.set-matrix.outputs.python_matrix }}
      platform_matrix: ${{ steps.set-matrix.outputs.platform_matrix }}
    defaults:
      run:
        shell: bash
    steps:
      # Halt for testing
      - name: Wait For Connection
        uses: google-ml-infra/actions/ci_connection@main
        with:
          halt-dispatch-input: ${{ inputs.halt-for-connection }}
      - name: "Determine the matrix"
        id: set-matrix
        run: |
            echo ${{ matrix.workflow_call_runner }}

  build_artifacts:
    needs: determine_matrix
    defaults:
      run:
        # Explicitly set the shell to bash to override the default Windows environment, i.e, cmd.
        shell: bash
    strategy:
      fail-fast: false # don't cancel all jobs on failure
      matrix:
        runner: ${{ fromJSON(needs.determine_matrix.outputs.platform_matrix) }}
        artifact: ${{ fromJSON(needs.determine_matrix.outputs.artifact_matrix) }}
        python: ${{ fromJSON(needs.determine_matrix.outputs.python_matrix) }}
        exclude:
          # Windows doesn't support CUDA artifacts
          - runner: "windows-x86-n2-16"
            artifact: "jax-cuda-pjrt"
          - runner: "windows-x86-n2-16"
            artifact: "jax-cuda-plugin"

    runs-on: ${{ matrix.runner }}

    container: ${{ (contains(matrix.runner, 'linux-x86') && 'us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build:latest') ||
                   (contains(matrix.runner, 'linux-arm64') && 'us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build-arm64:latest') ||
                   (contains(matrix.runner, 'windows-x86') && null) }}

    env:
      JAXCI_HERMETIC_PYTHON_VERSION: "${{ matrix.python }}"
      JAXCI_CLONE_MAIN_XLA: "${{ inputs.clone_main_xla }}"

    steps:
      - uses: actions/checkout@v3
      - name: Enable RBE if building on Linux x86 or Windows x86
        if: contains(matrix.runner, 'linux-x86') || contains(matrix.runner, 'windows-x86')
        run: echo "JAXCI_BUILD_ARTIFACT_WITH_RBE=1" >> $GITHUB_ENV
      # Halt for testing
      - name: Wait For Connection
        uses: google-ml-infra/actions/ci_connection@main
        with:
          halt-dispatch-input: ${{ inputs.halt-for-connection }}
      - name: Build ${{ matrix.artifact }}
        run: ./ci/build_artifacts.sh "${{ matrix.artifact }}"
      - name: Set PLATFORM env var for use in upload destination 
        run: |
          os=$(uname -s | awk '{print tolower($0)}')
          arch=$(uname -m)

          # Adjust name for Windows
          if [[  $os  =~ "msys_nt" ]]; then
            os="windows"

          fi

          echo "PLATFORM=${os}_${arch}" >> $GITHUB_ENV
      - name: Upload artifacts to GCS bucket
        if: inputs.upload_artifacts
        run:  gsutil -m cp -r $(pwd)/dist/*.whl gs://general-ml-ci-transient/jax-github-actions/"${{ inputs.upload_destination_prefix }}"/$PLATFORM/python${JAXCI_HERMETIC_PYTHON_VERSION}/
      
