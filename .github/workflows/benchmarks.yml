name: Benchmarks

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: choice
        required: true
        default: 'no'
        options:
        - 'yes'
        - 'no'

jobs:
  jax-build-and-test:
    runs-on: linux-x86-g2-48-l4-4gpu # Use a GPU-enabled runner
    container:
      image: "gcr.io/tensorflow-testing/nosla-cuda12.3-cudnn9.1-ubuntu20.04-manylinux2014-multipython:latest"

    env:
      JAXCI_HERMETIC_PYTHON_VERSION: 3.11

    steps:
      - name: Checkout JAX Fork
        uses: actions/checkout@v3
        with:
          repository: 'google-ml-infra/jax-fork'
          path: jax-fork

      - name: Install JAX Dependencies
        working-directory: jax-fork
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install absl-py
          pip install "jax[cuda12_pip]"  # Adjust CUDA version if needed
          pip install google-benchmark
      - name: Run JAX Multiprocess GPU Test
        working-directory: jax-fork
        continue-on-error: true
        run: python -m pytest tests/multiprocess_gpu_test.py

  build-xla-gpu-and-test:
    runs-on: linux-x86-g2-48-l4-4gpu # Use a GPU-enabled runner
    container:
      image: "gcr.io/tensorflow-testing/nosla-cuda12.3-cudnn9.1-ubuntu20.04-manylinux2014-multipython:latest"
      options: --gpus all --privileged  # Might need privileged mode, use with caution

    steps:
      - name: Checkout XLA
        uses: actions/checkout@v3
        with:
          repository: openxla/xla  # Replace with your fork if needed
          path: xla
        
      - name: Create results directory
        working-directory: xla
        run: mkdir -p results
        
      - name: Get GPU spec
        working-directory: xla
        continue-on-error: true
        run: nvidia-smi
        
      - name: Configure XLA
        working-directory: xla
        run: ./configure.py --backend CUDA --nccl
      
      - name: Set TF_CPP_MAX_VLOG_LEVEL
        working-directory: xla
        run: export TF_CPP_MAX_VLOG_LEVEL=1
        
      - name: Check TF_CPP_MAX_VLOG_LEVEL
        working-directory: xla
        run: echo "$TF_CPP_MAX_VLOG_LEVEL"

      - name: Build hlo_runner_main
        working-directory: xla
        run: bazel build -c opt --config=cuda --dynamic_mode=off //xla/tools/multihost_hlo_runner:hlo_runner_main
      name: Benchmarks

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: choice
        required: true
        default: 'no'
        options:
        - 'yes'
        - 'no'

jobs:
  build-xla-gpu-and-test:
    runs-on: linux-x86-g2-48-l4-4gpu
    container:
      image: "gcr.io/tensorflow-testing/nosla-cuda12.3-cudnn9.1-ubuntu20.04-manylinux2014-multipython:latest"
      options: --gpus all --privileged 

    steps:
      - name: Checkout XLA
        uses: actions/checkout@v3
        with:
          repository: openxla/xla 
          path: xla

      - name: Create results directory
        working-directory: xla
        run: mkdir -p results

      - name: Get GPU spec
        working-directory: xla
        continue-on-error: true
        run: nvidia-smi

      - name: Configure XLA
        working-directory: xla
        run: ./configure.py --backend CUDA --nccl
      
      - name: Set TF_CPP_MAX_VLOG_LEVEL
        working-directory: xla
        run: echo "TF_CPP_MAX_VLOG_LEVEL=1" >> $GITHUB_ENV  # Use GITHUB_ENV to persist across steps

      - name: Check TF_CPP_MAX_VLOG_LEVEL
        working-directory: xla
        run: echo "$TF_CPP_MAX_VLOG_LEVEL"

      - name: Build hlo_runner_main
        working-directory: xla
        run: bazel build -c opt --config=cuda --dynamic_mode=off //xla/tools/multihost_hlo_runner:hlo_runner_main

      - name: Create b284431534_transpose_convert_f32_s8.hlo
        working-directory: xla
        run: |
          cat << EOF > b284431534_transpose_convert_f32_s8.hlo
          HloModule test, entry_computation_layout={(f32[1,4,32,192,384]{4,3,2,1,0})->s8[1,4,192,384,32]{4,3,2,1,0}}

          fusion {
            param_0 = f32[1,4,32,192,384] parameter(0)
            transpose = f32[1,4,192,384,32] transpose(param_0), dimensions={0,1,3,4,2}
            ROOT convert = s8[1,4,192,384,32] convert(transpose)
          }

          ENTRY main {
            param_0 = f32[1,4,32,192,384] parameter(0)
            ROOT fusion = s8[1,4,192,384,32] fusion(param_0), kind=kInput, calls=fusion
          }
          EOF

      - name: Run specific HLO file
        working-directory: xla
        run: ./bazel-bin/xla/tools/multihost_hlo_runner/hlo_runner_main --device_type=gpu --use_spmd_partitioning b284431534_transpose_convert_f32_s8.hlo &> results/b284431534_transpose_convert_f32_s8.hlo.log
      
      # - name: Run HLO Module Benchmarks with GPU in xla/tests/fuzz
      #   working-directory: xla
      #   continue-on-error: true
      #   run: |
      #     for file in xla/tests/fuzz/*.hlo; do
      #       filename=$(basename "$file")
      #       # Skip expected failed hlo files.
      #       if [[ "$filename" == "rand_000060.hlo" || "$filename" == "rand_000067.hlo" || "$filename" == "rand_000072.hlo" ]]; then
      #         echo "Skipping benchmark on $file"
      #         continue
      #       fi
      #       echo "Running benchmark on $file" 
      #       ./bazel-bin/xla/tools/multihost_hlo_runner/hlo_runner_main --device_type=gpu --use_spmd_partitioning "$file" &> results/"$filename".log
      #     done

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: gpu-xla-benchmarks
          path: xla/results
      # - name: Wait For Connection
      #   uses: google-ml-infra/actions/ci_connection@main
      #   with:
      #     halt-dispatch-input: ${{ inputs.halt-for-connection }}

      # - name: Run HLO Module Benchmarks withg GPU in xla/tests/fuzz
      #   working-directory: xla
      #   continue-on-error: true
      #   run: |
      #     for file in xla/tests/fuzz/*.hlo; do
      #       filename=$(basename "$file")
      #       # Skip expected failed hlo files.
      #       if [[ "$filename" == "rand_000060.hlo" || "$filename" == "rand_000067.hlo" || "$filename" == "rand_000072.hlo" ]]; then
      #         echo "Skipping benchmark on $file"
      #         continue
      #       fi
      #       echo "Running benchmark on $file" &> results/"$filename".log
      #       ./bazel-bin/xla/tools/multihost_hlo_runner/hlo_runner_main --device_type=gpu --use_spmd_partitioning "$file" &> results/"$filename".log
      #     done

      # - name: Upload Results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: gpu-xla-benchmarks
      #     path: xla/results
