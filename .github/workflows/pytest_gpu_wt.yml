name: Run Pytest GPU tests

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: choice
        required: true
        default: 'no'
        options:
        - 'yes'
        - 'no'
  workflow_call:
    inputs:
      runner:
        description: "Which runner should the workflow run on?"
        type: string
        required: true
        default: "linux-x86-n2-16"
      python:
        description: "Which python version should the artifact be built for?"
        type: string
        required: true
        default: "3.12"
      download_url_prefix:
        description: "GCS location prefix from where the artifacts should be downloaded"
        required: false
        default: '${{ github.workflow }}/${{ github.run_number }}/${{ github.run_attempt }}'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  run-tests:
    strategy:
      fail-fast: false # don't cancel all jobs on failure
      matrix:
        test_env: [
          {cuda_version: "12.3",
          image: "us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/nosla-cuda12.3-cudnn9.1-ubuntu20.04-manylinux2014-multipython:latest"},
          {cuda_version: "12.1",
          image: "us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/nosla-cuda12.1-cudnn9.1-ubuntu20.04-manylinux2014-multipython:latest"},
          ]
        enable-x_64: [1, 0]

    runs-on: ${{ inputs.runner }}
    container: ${{ matrix.test_env.image }}
    
    name: "Pytest GPU (${{ inputs.runner }}, CUDA ${{ matrix.test_env.cuda_version }}, Python ${{ inputs.python }}, x64=${{ matrix.enable-x_64 }})"

    env:
      JAXCI_HERMETIC_PYTHON_VERSION: "${{ inputs.python }}"
      JAXCI_PYTHON: "python${{ inputs.python }}"
      JAXCI_ENABLE_X64: ${{ matrix.enable-x_64 }}

    steps:
      - uses: actions/checkout@v3
      # Halt for testing
      - name: Wait For Connection
        uses: google-ml-infra/actions/ci_connection@main
        with:
          halt-dispatch-input: ${{ inputs.halt-for-connection }}
      - name: Set PLATFORM env var for use in artifact download URL
        run: |
          os=$(uname -s | awk '{print tolower($0)}')
          arch=$(uname -m)
          echo "PLATFORM=${os}_${arch}" >> $GITHUB_ENV
      - name: Download artifacts built in the "build_artifacts" job
        run: mkdir -p $(pwd)/dist && gsutil -m cp -r gs://general-ml-ci-transient/jax-github-actions/"${{ inputs.download_url_prefix }}"/$PLATFORM/python${JAXCI_HERMETIC_PYTHON_VERSION}/*.whl $(pwd)/dist/
      - name: Install dependencies
        run: $JAXCI_PYTHON -m pip install -r build/requirements.in
      - name: Run Pytest GPU tests
        run: ./ci/run_pytest_gpu.sh
