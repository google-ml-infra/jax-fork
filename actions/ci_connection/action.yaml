name: "Wait For Connection"
description: 'Action to wait for connection from user'
inputs:
  halt-dispatch-input:
    description: 'Should the action wait for user connection from workflow_dispatch'
    required: false
    default: "0"
  should-wait-retry-tag:
    description: "Tag that will flag action to wait on reruns if present"
    required: false
    default: "CI Connection Halt - On Retry"
  should-wait-always-tag:
    description: "Tag that will flag action to wait on reruns if present"
    required: false
    default: "CI Connection Halt - Always"
  repository:
      description: 'Repository name with owner. For example, actions/checkout'
      default: ${{ github.repository }}
runs:
  using: "composite"
  steps:
  - name: Get current labels
    shell: bash
    id: get-labels
    env:
      FALLBACK_LABELS: ${{ toJSON(github.event.pull_request.labels) }}
    run: |
      # Fetch labels using GitHub API
      response=$(curl -sL \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${{ github.token }}" \
        https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels)

      # labels=$(echo "$response" | $python_bin -c "import sys, json; labels=[label['name'] for label in json.load(sys.stdin)]; print(json.dumps(labels))")

      if echo "$response" | grep -q '"name":'; then
        labels_json=$response
      else
        echo Could not retrieve labels via API, falling back to using context
        labels_json=${FALLBACK_LABELS}
      fi
      
      labels=$(echo "$labels_json" | $python_bin -c "import sys, json; labels=[label['name'] for label in json.load(sys.stdin)]; print(json.dumps(labels))")
      fallback_labels=$(echo ${FALLBACK_LABELS} | $python_bin -c "import sys, json; labels=[label['name'] for label in json.load(sys.stdin)]; print(json.dumps(labels))")
      # Set the labels as an output 
      echo "labels=$labels_json" >> $GITHUB_OUTPUT
      echo "labels_fallback=$labels_json" >> $GITHUB_OUTPUT

  - name: Print halt conditions
    shell: bash
    run: |
      echo "All labels: ${{ steps.get-labels.outputs.labels }}"
      echo "All labels: ${{ steps.get-labels.outputs.labels_fallback }}"
      echo "Halt retry tag: ${{ inputs.should-wait-retry-tag }}"
      echo "Halt always tag: ${{ inputs.should-wait-always-tag }}"
      echo "Should halt input: ${{ inputs.halt-dispatch-input }}"
      echo "Reattempt count: ${{ github.run_attempt }}"
      echo "PR number: ${{ github.event.pull_request.number }}"

  - name: Halt For Connection
    shell: bash
    if: |
      contains(fromJSON(steps.get-labels.outputs.labels), inputs.should-wait-retry-tag) && github.run_attempt > 1 ||
      contains(fromJSON(steps.get-labels.outputs.labels), inputs.should-wait-always-tag) ||
      inputs.halt-dispatch-input == 'yes'
    env:
      REPOSITORY: ${{ inputs.repository }}
      INTERACTIVE_CI: 1 
      PYTHONUNBUFFERED: 1
    run: |
      echo "$GITHUB_ACTION_PATH"
      python3 $GITHUB_ACTION_PATH/wait_for_connection.py
