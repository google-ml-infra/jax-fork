name: "Wait For Connection"
description: 'Action to wait for connection from user'
inputs:
  halt-dispatch-input:
    description: 'Should the action wait for user connection from workflow_dispatch'
    required: false
    default: "0"
  should-wait-retry-tag:
    description: "Tag that will flag action to wait on reruns if present"
    required: false
    default: "CI Connection Halt - On Retry"
  should-wait-always-tag:
    description: "Tag that will flag action to wait on reruns if present"
    required: false
    default: "CI Connection Halt - Always"
  repository:
      description: 'Repository name with owner. For example, actions/checkout'
      default: ${{ github.repository }}
runs:
  using: "composite"
  steps:
  - name: Get current labels
    shell: bash
    id: get-labels
    run: |
      # Pick an existing Python alias
      python_bin=$(which python3 2>/dev/null || which python)
      # Get the labels
      labels=$($python_bin "$GITHUB_ACTION_PATH"/get_labels.py)
      # Store them in the output, to be used in subsequent steps
      echo "labels=$labels" >> "$GITHUB_OUTPUT"
      
  - name: Print out halt conditions
    shell: bash
    run: |
      echo "All labels: ${{ steps.get-labels.outputs.labels }}"
      echo "Halt retry tag: ${{ inputs.should-wait-retry-tag }}"
      echo "Halt always tag: ${{ inputs.should-wait-always-tag }}"
      echo "Should halt input: ${{ inputs.halt-dispatch-input }}"
      echo "Reattempt count: ${{ github.run_attempt }}"
      echo "PR number: ${{ github.event.number }}"

  - name: Halt for connection
    shell: bash
    # fromJSON parses the search string into an actual array
    # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions#example-matching-an-array-of-strings

    # Wait on 2+ retries, if the wait-on-retry label is set
    # Always wait, if the always-wait label is set
    # Always wait if the workflow was triggered manually, and the value was set
    if: |
      contains(fromJSON(steps.get-labels.outputs.labels), inputs.should-wait-retry-tag) && github.run_attempt > 1 ||
      contains(fromJSON(steps.get-labels.outputs.labels), inputs.should-wait-always-tag) ||
      contains(fromJSON('["yes", "Yes", "y", "1"]'), inputs.halt-dispatch-input)
    env:
      REPOSITORY: ${{ inputs.repository }}
      INTERACTIVE_CI: 1 
      PYTHONUNBUFFERED: 1
    run: |
      echo "$GITHUB_ACTION_PATH"
      python3 $GITHUB_ACTION_PATH/wait_for_connection.py
